"use strict";

/*
###Задание 2
Вы управляете рестораном, в котором работают разные повара, специализирующиеся 
на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.
Необходимо реализовать функцию newOrder. Создавать вспомогательные функции, 
коллекции, не запрещается. Старайтесь использовать коллекции Map/Set, где это 
актуально. Представленный ниже код должен работать.

Повара и их специализации:
Олег - специализация: Пицца.
Андрей - специализация: Суши.
Анна - специализация: Десерты.

Блюда, которые могут заказать посетители:
Пицца "Маргарита"
Пицца "Пепперони"
Пицца "Три сыра"
Суши "Филадельфия"
Суши "Калифорния"
Суши "Чизмаки"
Суши "Сеякемаки"
Десерт Тирамису
Десерт Чизкейк
*/

// Посетитель ресторана.
class Client {
  constructor(firstname, lastname) {
    this.firstname = firstname;
    this.lastname = lastname;
  }
}

// Вам необходимо реализовать класс, который управляет заказами и поварами.
class Manager {
  constructor() {
    
    this.cooks = {
      "Пицца": "Олег",
      "Суши": "Андрей",
      "Десерт": "Анна"
    };

    
    this.menu = {
      "Пицца Маргарита": 50,
      "Пицца Пепперони": 120,
      "Пицца Три сыра": 12340,
      "Суши Филадельфия": 15320,
      "Суши Калифорния": 340,
      "Суши Чизмаки": 4360,
      "Суши Сеякемаки": 170,
      "Десерт Тирамису": 810,
      "Десерт Чизкейк": 920
    };

    
    this.desserts = ["Десерт Тирамису", "Десерт Чизкейк"];
  }

  newOrder(client, ...items) {
    console.log(`Клиент ${client.firstname} ${client.lastname} заказал:`);

    items.forEach(item => {
      const dish = `${item.type} "${item.name}"`;

      // Проверяем, существует ли блюдо в меню
      if (!this.menu[dish]) {
        console.error(`Ошибка: ${dish} - такого блюда не существует.`);
        return;
      }

      // Получаем имя повара по типу блюда
      const cook = this.cooks[item.type];
      if (!cook) {
        console.error(`Ошибка: для типа блюда ${item.type} нет повара.`);
        return;
      }

      // Выводим информацию о заказе
      console.log(`${dish} - ${item.quantity}; готовит повар ${cook}`);

      // Если блюдо - десерт, добавляем его в заказ
      if (this.desserts.includes(item.name)) {
        console.log(`Десерт "${item.name}" - добавлен в заказ.`);
      }
    });
  }
}
// Можно передать внутрь конструктора что-либо, если необходимо.
const manager = new Manager();

// Вызовы ниже должны работать верно, менять их нельзя, удалять тоже.
manager.newOrder(
  new Client("Иван", "Иванов"),
  { name: "Маргарита", quantity: 1, type: "Пицца" },
  { name: "Пепперони", quantity: 2, type: "Пицца" },
  { name: "Чизкейк", quantity: 1, type: "Десерт" },
);
// Вывод:
// Клиент Иван заказал: 
// Пицца "Маргарита" - 1; готовит повар Олег
// Пицца "Пепперони" - 2; готовит повар Олег
// Десерт "Чизкейк" - 1; готовит повар Анна

// ---

const clientPavel = new Client("Павел", "Павлов");
manager.newOrder(
  clientPavel,
  { name: "Филадельфия", quantity: 5, type: "Суши" },
  { name: "Калифорния", quantity: 3, type: "Суши" },
);
// Вывод:
// Клиент Павел заказал: 
// Суши "Филадельфия" - 5; готовит повар Андрей
// Суши "Калифорния" - 3; готовит повар Андрей

manager.newOrder(
  clientPavel,
  { name: "Калифорния", quantity: 1, type: "Суши" },
  { name: "Тирамису", quantity: 2, type: "Десерт" },
);
// Вывод:
// Клиент Павел заказал: 
// Суши "Филадельфия" - 5; готовит повар Андрей
// Суши "Калифорния" - 4; готовит повар Андрей
// Десерт "Тирамису" - 2; готовит повар Анна

manager.newOrder(
  clientPavel,
  { name: "Филадельфия", quantity: 1, type: "Суши" },
  { name: "Трубочка с вареной сгущенкой", quantity: 1, type: "Десерт" },
);
// Ничего не должно быть добавлено, должна быть выброшена ошибка:
// Десерт "Трубочка с вареной сгущенкой" - такого блюда не существует.